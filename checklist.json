[{"checklist_title": "Array problems", "sub_titles": [{"title": "Move Negative elements to front", "info": "<a href=\"https://iq.opengenus.org/move-negative-elements-to-front/\" rel=\"noopener\" target=\"_blank\">Move Negative elements to front</a> is a simple problem that tests your knowledge of how to move elements across an array. These involve partition algorithms like <a href=\"https://iq.opengenus.org/lomuto-partition-scheme/\" rel=\"noopener\" target=\"_blank\">Lomuto</a> and <a href=\"https://iq.opengenus.org/hoare-partition/\" rel=\"noopener\" target=\"_blank\">Hoare</a> Partition Scheme and has direct application in algorithms like QuickSort."}, {"title": "2 Sum Problem", "info": "<a href=\"https://iq.opengenus.org/two-sum/\" rel=\"noopener\" target=\"_blank\">2 Sum problem</a> is a standard problem where you need to find two elements that add up to a given number. The advanced form is to find 2 numbers whose <a href=\"https://iq.opengenus.org/2-sum-closest/\" rel=\"noopener\" target=\"_blank\">sum to closest to the target</a>."}, {"title": "3 Sum Problem", "info": "In Interviews, you need to build on problems. <a href=\"https://iq.opengenus.org/triplet-with-given-sum/\" rel=\"noopener\" target=\"_blank\">3 Sum problem</a> tests your knowledge from the previous problem."}, {"title": "3 Sum Closest Problem", "info": "You have attempted the 2 Sum Closest problem variant but can you use similar ideas to solve <a href=\"https://iq.opengenus.org/closest-3-sum-problem/\" rel=\"noopener\" target=\"_blank\">3 Sum Closest</a> problem as well."}, {"title": "4 Sum Problem", "info": "<a href=\"https://iq.opengenus.org/4-sum-problem/\" rel=\"noopener\" target=\"_blank\">4 Sum problem</a> brings in new ideas and puts your knowledge from previous problems to test. If you are able to solve it, try the 4 Sum Closest problem on your own."}]}, {"checklist_title": "Linked List problems", "sub_titles": [{"title": "Linked List with no NULLs", "info": "This is an important topic that you must cover. In interviews at top companies like Google, you must <a href=\"https://iq.opengenus.org/linked-list-with-no-nulls/\" rel=\"noopener\" target=\"_blank\">implement Linked List without using NULL</a> as this is the standard coding practice in Industry."}, {"title": "XOR Linked List", "info": "<a href=\"https://iq.opengenus.org/xor-linked-list/\" rel=\"noopener\" target=\"_blank\">XOR Linked List</a> is the memory efficient version of <a href=\"https://iq.opengenus.org/doubly-linked-list/\" rel=\"noopener\" target=\"_blank\">Doubly Linked List</a>. The concept of using XOR in such cases in very important for Interviews."}, {"title": "Linked List vs Array", "info": "Understand the differences between <a href=\"https://iq.opengenus.org/array-vs-linked-list/\" rel=\"noopener\" target=\"_blank\">Array and Linked List</a>. Often, asked in initial rounds."}, {"title": "Binary Search on LL", "info": "Binary Search is frequently used to solve Interview problem. Is <a href=\"https://iq.opengenus.org/binary-search-in-linked-list/\" rel=\"noopener\" target=\"_blank\">Binary Search on Linked List</a> equally efficient?."}, {"title": "Middle element in LL", "info": "This problem of <a href=\"https://iq.opengenus.org/find-middle-of-a-linked-list/\" rel=\"noopener\" target=\"_blank\">\"Finding middle element of a Linked List\"</a> involves the technique of Slow and Fast pointer which is widely used."}, {"title": "Sort LL on absolute values", "info": "<a href=\"https://iq.opengenus.org/sort-a-linked-list-already-sorted-on-absolute-values/\" rel=\"noopener\" target=\"_blank\">Sort Linked List</a> whose values have already been sorted on absolute values is a HOT interview problem."}, {"title": "Loop in Linked List", "info": "There are <a href=\"https://iq.opengenus.org/detect-loop-in-linked-list/\" rel=\"noopener\" target=\"_blank\">3 methods to detect a loop</a> in Linked List."}, {"title": "Reverse a Linked List", "info": "Reversing  a Linked List may seem to be a simple problem but it uses 3 pointers. The challenge is to <a href=\"https://iq.opengenus.org/reverse-linked-list-using-2-pointers-xor/\" rel=\"noopener\" target=\"_blank\">reverse a Linked List using 2 pointers</a>. This involves the idea of XOR."}, {"title": "Cycle detection", "info": "This is a HOT interview question. There are over 3 methods to <a href=\"https://iq.opengenus.org/cycle-detection-algorithms/\" rel=\"noopener\" target=\"_blank\">detect Cycle in a Linked List</a> and a follow-up question will to be <a href=\"https://iq.opengenus.org/detect-and-remove-loop-in-linked-list/\" rel=\"noopener\" target=\"_blank\">remove a cycle</a>."}]}, {"checklist_title": "Stack problems", "sub_titles": [{"title": "2 Stacks in one Array", "info": "This problem of implementing <a href=\"https://iq.opengenus.org/two-stacks-in-one-array/\" rel=\"noopener\" target=\"_blank\">2 Stacks in 1 array</a> is a simple problem. The main challenge is with the next problem."}, {"title": "N Stacks in one Array", "info": "This <a href=\"https://iq.opengenus.org/k-stacks-in-one-array/\" rel=\"noopener\" target=\"_blank\">problem</a> is much more challenging problem. Understand the solution carefully as this is a HOT interview question now. Similar problem is <a href=\"https://iq.opengenus.org/k-queues-in-array/\" rel=\"noopener\" target=\"_blank\">N Queues in one Array</a>."}, {"title": "Monotonic Stack", "info": "<a href=\"https://iq.opengenus.org/tag/monotonic-stack/\" rel=\"noopener\" target=\"_blank\">Monotonic Stack</a> is a core technique which exploits the properties of Stack to solve several challenging problems. Go through some example problems to hone your skills."}, {"title": "Merge Intervals", "info": "The problem of <a href=\"https://iq.opengenus.org/merge-intervals/\" rel=\"noopener\" target=\"_blank\">Merge Intervals</a> is a HOT interview problem. It is, often formulate as Time interval or duration of an event."}]}, {"checklist_title": "Queue problems", "sub_titles": [{"title": "Delete middle element of Queue", "info": "<a href=\"https://iq.opengenus.org/delete-middle-element-of-queue/\" rel=\"noopener\" target=\"_blank\">Delete middle element of Queue</a> is a simple problem that tests how you can use core operations to build other operations. If needed, you should quickly revise the <a href=\"https://iq.opengenus.org/queue/\" rel=\"noopener\" target=\"_blank\">basics of Queue</a> and <a href=\"https://iq.opengenus.org/queue-types-and-implementation/\" rel=\"noopener\" target=\"_blank\">types of Queue</a>."}, {"title": "Monotonic Queue", "info": "<a href=\"https://iq.opengenus.org/monotonic-queue/\" rel=\"noopener\" target=\"_blank\">Monotonic Queue</a> is a core technique using Queue to solve challenging problems like Daily Temperate problem."}, {"title": "Queue using Stack", "info": "<a href=\"https://iq.opengenus.org/queue-using-stack/\" rel=\"noopener\" target=\"_blank\">Implementing Queue</a> using Stack data structure is another important Interview problem to test your concepts. The corresponding problem is to <a href=\"https://iq.opengenus.org/stack-using-queue/\" rel=\"noopener\" target=\"_blank\">Implement Stack using Queue</a>."}, {"title": "Next Larger / Smaller element in Array", "info": "<a href=\"https://iq.opengenus.org/next-larger-smaller-element/\" rel=\"noopener\" target=\"_blank\">Next Larger / Smaller element in Array</a> is a difficult interview problem that use the idea of Monotonic Queue."}, {"title": "Maximal Rectangle problem", "info": "<a href=\"https://iq.opengenus.org/maximal-rectangle-problem/\" rel=\"noopener\" target=\"_blank\">Maximal Rectangle problem</a> is another difficult interview problem that use the idea of Monotonic Queue."}]}, {"checklist_title": "Binary Tree", "sub_titles": [{"title": "Diameter and Height", "info": "Finding the <a href=\"https://iq.opengenus.org/diameter-of-binary-tree/\" rel=\"noopener\" target=\"_blank\">Diameter</a> and <a href=\"https://iq.opengenus.org/find-height-or-depth-of-binary-tree/\" rel=\"noopener\" target=\"_blank\">Height</a> of a Binary Tree is a simple yet core problem that everyone should be fluent in. Every few students know that the average height of a random Binary Tree is <a href=\"https://iq.opengenus.org/average-height-of-random-binary-tree/\" rel=\"noopener\" target=\"_blank\">O(N^0.5) (see how?)</a>."}, {"title": "No NULL implementation", "info": "Implementing <a href=\"https://iq.opengenus.org/binary-search-tree-with-no-nulls/\" rel=\"noopener\" target=\"_blank\">Binary Tree with no NULLs</a> is an approach that sets you apart from other candidates. Avoiding NULLs is Industry standard."}, {"title": "Largest Independent Set", "info": "Finding the <a href=\"https://iq.opengenus.org/largest-independent-set-in-binary-tree/\" rel=\"noopener\" target=\"_blank\">Largest Independent Set</a> in Binary Tree is a problem that requires the application of Dynamic Programming. This is an important interview problem."}, {"title": "Copy Binary Tree", "info": "<a href=\"https://iq.opengenus.org/copy-a-binary-tree-with-random-pointers/\" rel=\"noopener\" target=\"_blank\">Copying a Binary Tree with random pointers</a> is a challenging problem. The trick is to handle the random pointers efficiently as the destination node may not have been processed. A related concept is <a href=\"https://iq.opengenus.org/threaded-binary-tree/\" rel=\"noopener\" target=\"_blank\">Threaded Binary Tree</a>."}, {"title": "Traversal of Binary Tree", "info": "<a href=\"https://iq.opengenus.org/zigzag-traversal-of-binary-tree/\" rel=\"noopener\" target=\"_blank\">Zig Zag traversal</a> and <a href=\"https://iq.opengenus.org/level-order-traversal-binary-tree/\" rel=\"noopener\" target=\"_blank\">Level Order traversal</a> of a Binary Tree is a problem that tests your Binary Tree handling skills. Different <a href=\"https://iq.opengenus.org/views-in-binary-tree/\" rel=\"noopener\" target=\"_blank\">types of view</a> of a Binary Tree is equally important problem."}, {"title": "Self-balancing Trees", "info": "<a href=\"https://iq.opengenus.org/different-self-balancing-binary-trees/\" rel=\"noopener\" target=\"_blank\">Self-balancing Trees</a> are important concepts. Interviewers usually ask to list a few self-balancing binary trees. Some advanced levels may ask to explain the idea behind <a href=\"https://iq.opengenus.org/red-black-tree-insertion/\" rel=\"noopener\" target=\"_blank\">Red Black Tree</a>."}, {"title": "Spreadsheet", "info": "A HOT interview question is to <a href=\"https://iq.opengenus.org/data-structure-for-spreadsheet/\" rel=\"noopener\" target=\"_blank\">design a spreadsheet / Excel sheet</a>. This ivolve the idea of using Binary Tree."}]}, {"checklist_title": "Trie problems", "sub_titles": [{"title": "Maximum XOR of two numbers", "info": "This problem of finding the <a href=\"https://iq.opengenus.org/maximum-xor-trie/\" rel=\"noopener\" target=\"_blank\">Maximum XOR of two numbers</a> involve the use of Trie data structure which is not obvious from the problem statement."}, {"title": "Longest Common Suffix", "info": "This is a HOT interview problem. Finding the <a href=\"https://iq.opengenus.org/longest-common-suffix/\" rel=\"noopener\" target=\"_blank\">Longest Common Suffix</a> cannot be done efficiently using Trie. Similarly, you can solve the <a href=\"https://iq.opengenus.org/longest-common-prefix/\" rel=\"noopener\" target=\"_blank\">Longest Common Prefix</a> problem."}, {"title": "All Valid Word Breaks of a Sentence", "info": "Word Break Problem is a standard problem that involve the use of DP and Greedy algorithms. This variant: <a href=\"https://iq.opengenus.org/all-valid-word-breaks/\" rel=\"noopener\" target=\"_blank\">All Valid Word Breaks of a Sentence</a> use Trie to solve it optimally."}, {"title": "Autocomplete feature", "info": "<a href=\"https://iq.opengenus.org/autocomplete-using-trie-data-structure/\" rel=\"noopener\" target=\"_blank\">Autocomplete feature</a> is the most common feature of True data structure and Interviews revolve around this specific application."}]}, {"checklist_title": "Hash Map / Set", "sub_titles": [{"title": "Collision Resolution", "info": "There are <a href=\"https://iq.opengenus.org/different-collision-resolution-techniques-in-hashing/\" rel=\"noopener\" target=\"_blank\">different Collision Resolution techniques</a> in a Hash Set and is frequently asked in Interviews."}, {"title": "LFU (Least Frequently Used) Cache", "info": "Designing <a href=\"https://iq.opengenus.org/least-frequently-used-cache/\" rel=\"noopener\" target=\"_blank\">LFU (Least Frequently Used) Cache</a> is a HOT interview question that involve the use of Hash Map. Another related problem is to design <a href=\"https://iq.opengenus.org/implement-lru-cache/\" rel=\"noopener\" target=\"_blank\">Least Recently Used (LRU) Cache</a>."}, {"title": "Quadratic Probing", "info": "The concept of <a href=\"https://iq.opengenus.org/quadratic-probing/\" rel=\"noopener\" target=\"_blank\">Quadratic Probing</a> and <a href=\"https://iq.opengenus.org/linear-probing/\" rel=\"noopener\" target=\"_blank\">Linear Probing</a> are frequently asked in Interviews."}, {"title": "Hash Functions", "info": "Knowing multiple examples of <a href=\"https://iq.opengenus.org/hash-functions-examples/\" rel=\"noopener\" target=\"_blank\">Hash Functions</a> is important for Interview as it is the fundamental component of Hash Set. You may need to hash an array or set."}, {"title": "All O`one Data Structure", "info": "This problem is about designing a custom Data Structure. These type of problems are HOT in interview. Try: <a href=\"https://iq.opengenus.org/all-oone-data-structure/\" rel=\"noopener\" target=\"_blank\">All O`one Data Structure</a>."}]}, {"checklist_title": "Sorting Algorithms", "sub_titles": [{"title": "Search in Sorted 2D matrix", "info": "The problem to <a href=\"https://iq.opengenus.org/search-element-in-sorted-2d-matrix/\" rel=\"noopener\" target=\"_blank\">Search an element in Sorted 2D matrix</a> is a HOT interview problem."}, {"title": "Quick Sort", "info": "<a href=\"https://iq.opengenus.org/quick-sort/\" rel=\"noopener\" target=\"_blank\">Quick Sort</a> is the most important topic in Sorting. Revise <a href=\"https://iq.opengenus.org/time-and-space-complexity-of-quick-sort/\" rel=\"noopener\" target=\"_blank\">Time Complexity</a> of Quick Sort, <a href=\"https://iq.opengenus.org/median-of-medians/\" rel=\"noopener\" target=\"_blank\">Median of Medians</a> algorithm. Practice these <a href=\"https://iq.opengenus.org/questions-on-quick-sort/\" rel=\"noopener\" target=\"_blank\">MCQs for Interviews</a>."}, {"title": "Hybrid Sorting Algorithm", "info": "The concept of <a href=\"https://iq.opengenus.org/hybrid-sorting-algorithms/\" rel=\"noopener\" target=\"_blank\">Hybrid Sorting</a> presents to the Interviewer that you understand how real-world algorithms are designed. There is no single algorithm that works best for all cases."}, {"title": "Radix Sort", "info": "Knowing a few Non-comparison based sorting algorithms is important and <a href=\"https://iq.opengenus.org/radix-sort/\" rel=\"noopener\" target=\"_blank\">Radix Sort</a> is a strong example. <a href=\"https://iq.opengenus.org/time-complexity-for-non-comparison-based-sorting/\" rel=\"noopener\" target=\"_blank\">Analyze Time Complexity</a> for Non-Comparison based Sorting algorithm."}, {"title": "Sort on Linked List", "info": "Sorting on array and linked list are two different things. One may work well on array but not on Linked List and vice versa. <a href=\"https://iq.opengenus.org/insertion-sort-linked-list/\" rel=\"noopener\" target=\"_blank\">Insertion sort on Linked List</a> is a must."}]}, {"checklist_title": "Mathematical Algorithms", "sub_titles": [{"title": "Analyze Algorithms", "info": "Having an overview of <a href=\"https://iq.opengenus.org/mathematics-for-analyzing-algorithms/\" rel=\"noopener\" target=\"_blank\">Mathematics for Analyzing Algorithms</a> is a fundamental skill that you should have."}, {"title": "Permutation", "info": "Permutation is a HOT interview questions. Problems like <a href=\"https://iq.opengenus.org/k-permutation-of-first-n-integers/\" rel=\"noopener\" target=\"_blank\">K-th permutation</a>, <a href=\"https://iq.opengenus.org/lexicographical-next-permutation/\" rel=\"noopener\" target=\"_blank\">Lexicographical Next Permutation</a>, <a href=\"https://iq.opengenus.org/heaps-algorithm-for-generating-permutations/\" rel=\"noopener\" target=\"_blank\">Heap's algorithm</a> for generating permutations and <a href=\"https://iq.opengenus.org/counting-derangements/\" rel=\"noopener\" target=\"_blank\">Counting derangements</a> are must practice problems."}, {"title": "N-th root of a number", "info": "There are 3 mainstream algorithms to find the <a href=\"https://iq.opengenus.org/n-th-root-of-number/\" rel=\"noopener\" target=\"_blank\">N-th root of a number</a> which everyone should have an idea of. You can also use <a href=\"https://iq.opengenus.org/binary-search-algorithm/\" rel=\"noopener\" target=\"_blank\">Binary Search</a> to find <a href=\"https://iq.opengenus.org/square-root-of-number/\" rel=\"noopener\" target=\"_blank\">Square Root</a> and <a href=\"https://iq.opengenus.org/cube-root-using-binary-search/\" rel=\"noopener\" target=\"_blank\">Cube Root</a> of a number."}, {"title": "Regula Falsi Method", "info": "<a href=\"https://iq.opengenus.org/regula-falsi-method/\" rel=\"noopener\" target=\"_blank\">Regula Falsi Method</a> and <a href=\"https://iq.opengenus.org/newton-raphson-method/\" rel=\"noopener\" target=\"_blank\">Newton Raphson Method</a> are used to find root of a Polynomial."}, {"title": "Find GCD", "info": "<a href=\"https://iq.opengenus.org/binary-gcd-algorithm/\" rel=\"noopener\" target=\"_blank\">Binary GCD algorithm or Stein's algorithm</a> is the most basic algorithm to find GCD of numbers efficiently. <a href=\"https://iq.opengenus.org/euclidean-algorithm-greatest-common-divisor-gcd/\" rel=\"noopener\" target=\"_blank\">Euclidean Algorithm</a> is an efficient alternative."}, {"title": "Integer Factorization", "info": "There are multiple <a href=\"https://iq.opengenus.org/integer-factorization-algorithms/\" rel=\"noopener\" target=\"_blank\">Integer Factorization Algorithms</a> and <a href=\"https://iq.opengenus.org/pollards-rho-algorithm/\" rel=\"noopener\" target=\"_blank\">Pollard's rho algorithm</a> for factorization is a must."}, {"title": "Generate 0 and 1", "info": "This is a HOT interview problem. <a href=\"https://iq.opengenus.org/generate-0-and-1-with-25-and-75-probability/\" rel=\"noopener\" target=\"_blank\">Generate 0 and 1</a> with 25% and 75% probability using standard random functions."}, {"title": "Swap two numbers", "info": "This is a HOT MCQ interview problem. There are over <a href=\"https://iq.opengenus.org/swap-two-variables/\" rel=\"noopener\" target=\"_blank\">6 different techniques</a> to swap two numbers."}]}, {"checklist_title": "String Algorithms", "sub_titles": [{"title": "Sub-strings of a string", "info": "This is more like a brute force approach but candidates fail to implement or design an algorithm to <a href=\"https://iq.opengenus.org/print-all-sub-strings/\" rel=\"noopener\" target=\"_blank\">generate all sub-strings of a string</a>. This will help you solve most standard problems."}, {"title": "Number of palindromic substrings", "info": "There are over 4 algorithms to find the <a href=\"https://iq.opengenus.org/number-of-palindromic-substrings/\" rel=\"noopener\" target=\"_blank\">Number of palindromic substrings in a string</a> which involves use of Dynamic Programming and Modifed Manacher\u2019s algorithm."}, {"title": "Pattern Search", "info": "This is often asked in last Interview rounds at FAANG. <a href=\"https://iq.opengenus.org/knuth-morris-pratt-algorithm/\" rel=\"noopener\" target=\"_blank\">KMP algorithm</a> is the standard technique while <a href=\"https://iq.opengenus.org/aho-corasick-algorithm/\" rel=\"noopener\" target=\"_blank\">Aho Corasick Algorithm</a> helps you generalize the problem (asked frequently). <a href=\"https://iq.opengenus.org/rabin-karp-string-pattern-searching-algorithm/\" rel=\"noopener\" target=\"_blank\">Rabin-Karp Pattern</a> Searching Algorithm is another efficient algorithm."}, {"title": "String Matching", "info": "The concept of <a href=\"https://iq.opengenus.org/string-hashing/\" rel=\"noopener\" target=\"_blank\">String Hashing</a> and <a href=\"https://iq.opengenus.org/rolling-hash/\" rel=\"noopener\" target=\"_blank\">Rolling Hash</a> is important in String Matching as it takes O(N) time to match a string but only O(1) time to match an integer. <a href=\"https://iq.opengenus.org/shift-or-algorithm-for-string-matching/\" rel=\"noopener\" target=\"_blank\">Shift OR algorithm</a> for String Matching and <a href=\"https://iq.opengenus.org/string-matching-using-bitset/\" rel=\"noopener\" target=\"_blank\">String Matching using Bitset</a> is a MUST for Interviews."}, {"title": "Sorted order of characters", "info": "The problem <a href=\"https://iq.opengenus.org/alien-dictionary/\" rel=\"noopener\" target=\"_blank\">Alien Dictionary problem</a>: Sorted order of characters is a HOT interview problem involving the concept of <a href=\"https://iq.opengenus.org/topological-sort-bfs/\" rel=\"noopener\" target=\"_blank\">Topological Sort</a>."}]}, {"checklist_title": "Dynamic Programming", "sub_titles": [{"title": "Basic problems on DP", "info": "Standard DP problems that are common in Interviews are: <a href=\"https://iq.opengenus.org/longest-geometric-progression/\" rel=\"noopener\" target=\"_blank\">Longest Geometric Progression</a>, Calculate <a href=\"https://iq.opengenus.org/calculate-binomial-coefficient/\" rel=\"noopener\" target=\"_blank\">Binomial Coefficient</a> and <a href=\"https://iq.opengenus.org/the-coin-change-problem/\" rel=\"noopener\" target=\"_blank\">Coin Change</a> Problem."}, {"title": "Shortest Path with k edges", "info": "This is a HOT interview problem where DP is applied on Graph problem. Finding the <a href=\"https://iq.opengenus.org/shortest-path-with-k-edges/\" rel=\"noopener\" target=\"_blank\">Shortest Path with k edges</a> and <a href=\"https://iq.opengenus.org/number-of-paths-with-k-edges/\" rel=\"noopener\" target=\"_blank\">Number of paths with k edges</a> with Dynamic Programming is a must practice."}, {"title": "Assembly Line Scheduling", "info": "Scheduling problems are HOT interview problems. <a href=\"https://iq.opengenus.org/assembly-line-scheduling-dp/\" rel=\"noopener\" target=\"_blank\">Assembly Line Scheduling</a> using DP is a must. Similarly, <a href=\"https://iq.opengenus.org/weighted-job-scheduling/\" rel=\"noopener\" target=\"_blank\">Weighted Job scheduling</a> problem is a variant that is popular in Interviews."}, {"title": "Knapsack Problem", "info": "Knapsack Problem is one of the most common Interview problems. <a href=\"https://iq.opengenus.org/0-1-knapsack-problem/\" rel=\"noopener\" target=\"_blank\">0-1 Knapsack Problem</a> is a variant that uses Dynamic Programming."}, {"title": "Box Stacking Problem", "info": "<a href=\"https://iq.opengenus.org/box-stacking-problem/\" rel=\"noopener\" target=\"_blank\">Box Stacking Problem</a> is a common problem for FAANG interviews. A variant of this is asked in every 3 out of 4 interviews."}, {"title": "Travelling Salesman Problem", "info": "<a href=\"https://iq.opengenus.org/travelling-salesman-problem-dp/\" rel=\"noopener\" target=\"_blank\">Travelling Salesman Problem</a> and its variants are frequently asked in Interviews. It involves DP and bitmasking concepts. This is NP-Complete problem."}]}, {"checklist_title": "Greedy Algorithms", "sub_titles": [{"title": "Activity Selection Problem", "info": "<a href=\"https://iq.opengenus.org/activity-selection-problem-greedy-algorithm/\" rel=\"noopener\" target=\"_blank\">Activity Selection Problem</a> is one of the important problems where Greedy Algorithm is the direct solution. A variant of this: <a href=\"https://iq.opengenus.org/scheduling-to-minimize-lateness/\" rel=\"noopener\" target=\"_blank\">Scheduling tasks to Minimize Lateness</a> is a critical Interview problem."}, {"title": "Egyptian Fraction Problem", "info": "<a href=\"https://iq.opengenus.org/egyptian-fraction-problem/\" rel=\"noopener\" target=\"_blank\">Egyptian Fraction Problem</a> is an important Interview problem that lies at the intersection of Mathematical and Greedy Algorithms."}, {"title": "Fractional Knapsack Problem", "info": "<a href=\"https://iq.opengenus.org/fractional-knapsack/\" rel=\"noopener\" target=\"_blank\">Fractional Knapsack Problem</a> is a variant of Knapsack Problems that can be solved using Greedy Algorithms."}, {"title": "Largest Cube Formed", "info": "The problem of <a href=\"https://iq.opengenus.org/find-the-largest-cube-formed-by-deleting-minimum-digits-from-a-number/\" rel=\"noopener\" target=\"_blank\">Largest Cube Formed</a> by deleting digits is interesting because of Time Complexity Analysis which many may get wrong in Interviews. It is O(N<sup>1/3</sup> logN logN)."}, {"title": "Maximal Clique", "info": "Greedy Algorithms are also applied on Graph based problems. Finding <a href=\"https://iq.opengenus.org/greedy-approach-to-find-single-maximal-clique/\" rel=\"noopener\" target=\"_blank\">Single Maximal Clique</a> is a challenging Interview problem that is asked."}, {"title": "Fitting Shelves Problem", "info": "This problem of <a href=\"https://iq.opengenus.org/fitting-shelves-problem/\" rel=\"noopener\" target=\"_blank\">Fitting Shelves</a> is HOT interview problem requiring Greedy Algorithm."}]}, {"checklist_title": "Backtracking problems", "sub_titles": [{"title": "Backtracking Algorithm for Sudoku", "info": "<a href=\"https://iq.opengenus.org/backtracking-sudoku/\" rel=\"noopener\" target=\"_blank\">Solving Sudoku</a> using Backtracking is a standard technique though the implementation strategy is challenging in an Interview setting."}, {"title": "8 Queens Problem", "info": "Solving <a href=\"https://iq.opengenus.org/8-queens-problem-backtracking/\" rel=\"noopener\" target=\"_blank\">8 Queens Problem</a> using Backtracking is yet another important Interview problem. In similar chess setting, MCQs on number of possibilities of a given condition are asked frequently."}, {"title": "Subset Sum Problem", "info": "Subset Sum Problem is a very common problem and many try to solve it using DP. Very few practice a variant where <a href=\"https://iq.opengenus.org/subset-sum-problem-backtracking/\" rel=\"noopener\" target=\"_blank\">Backtracking is applied</a> on Subset Sum Problem."}, {"title": "Knight's Tour Problem", "info": "In case of problems dealing with Chess, Backtracking is a potential technique. Solving <a href=\"https://iq.opengenus.org/knights-tour-problem/\" rel=\"noopener\" target=\"_blank\">Knight's Tour Problem</a> is important for Interviews and involve Backtracking and Warnsdorff's algorithm."}, {"title": "Word Break Problem", "info": "<a href=\"https://iq.opengenus.org/word-break-problem/\" rel=\"noopener\" target=\"_blank\">Word Break Problem</a> is an important Interview problem that involve concepts like Backtracking and Dynamic Programming."}]}, {"checklist_title": "Divide and Conquer", "sub_titles": [{"title": "Closest Pair of Points", "info": "<a href=\"https://iq.opengenus.org/closest-pair-of-points/\" rel=\"noopener\" target=\"_blank\">Closest Pair of Points</a> is the most important Interview Problem based on Geometry and uses the concept of Divide and Conquer to solve it."}, {"title": "Karatsuba Algorithm", "info": "Very few realize that there are algorithms that optimized fundamental operations like Multiplication. <a href=\"https://iq.opengenus.org/karatsuba-algorithm/\" rel=\"noopener\" target=\"_blank\">Karatsuba Algorithm</a> uses the concept of Divide and Conquer to multiply two number efficiently."}, {"title": "Floor in sorted array", "info": "Finding <a href=\"https://iq.opengenus.org/floor-in-sorted-array/\" rel=\"noopener\" target=\"_blank\">floor in sorted array</a> is an easy problem that is asked in Interviews. Having a good hold on <a href=\"https://iq.opengenus.org/binary-search-iterative-recursive/\" rel=\"noopener\" target=\"_blank\">Binary Search</a> is a must."}, {"title": "Elements with difference K", "info": "Finding <a href=\"https://iq.opengenus.org/elements-with-difference-k-in-sorted-array/\" rel=\"noopener\" target=\"_blank\">2 elements with difference K in a sorted array</a> is a fundamental problem that many get wrong."}, {"title": "Peak Element in an Array", "info": "The problem of finding <a href=\"https://iq.opengenus.org/peak-element-in-array/\" rel=\"noopener\" target=\"_blank\">Peak Element in an Array</a> tests your understanding of Divide and Conquer technique."}]}, {"checklist_title": "Decrease and Conquer", "sub_titles": [{"title": "Fake Coin Problem", "info": "<a href=\"https://iq.opengenus.org/fake-coin-problem/\" rel=\"noopener\" target=\"_blank\">Fake Coin Problem</a> is the most frequently asked Interview Problem that involve the concept of Decrease and Conquer. Very few use this technique."}, {"title": "Basics of Decrease & Conquer", "info": "Revise the basics of <a href=\"https://iq.opengenus.org/decrease-and-conquer/\" rel=\"noopener\" target=\"_blank\">Decrease and Conquer</a> along with overview of fundamental problems."}]}, {"checklist_title": "Graph Algorithms", "sub_titles": [{"title": "Islands Problem", "info": "<a href=\"https://iq.opengenus.org/number-of-islands/\" rel=\"noopener\" target=\"_blank\">Number of Islands in MxN matrix</a> (of 0 and 1) and <a href=\"https://iq.opengenus.org/making-a-large-island/\" rel=\"noopener\" target=\"_blank\">Making A Large Island</a> by changing one 0 to 1 are HOT interview problems. This involve the concept of BFS and DFS."}, {"title": "Transitive Closure Of A Graph", "info": "<a href=\"https://iq.opengenus.org/transitive-closure-graph-powering/\" rel=\"noopener\" target=\"_blank\">Transitive Closure Of A Graph using Graph Powering</a> is a core concept that helps to solve several challenging interview problems."}, {"title": "Dijkstra's algorithm", "info": "<a href=\"https://iq.opengenus.org/dijkstras-algorithm-finding-shortest-path-between-all-nodes/\" rel=\"noopener\" target=\"_blank\">Dijkstra's algorithm</a> will help you solve shortest path problems. <a href=\"https://iq.opengenus.org/time-and-space-complexity-of-dijkstra-algorithm/\" rel=\"noopener\" target=\"_blank\">Time Complexity</a> of Dijkstra's algorithm is a HOT interview problem."}, {"title": "Topological Sort", "info": "Topological Sort is used to order nodes in a Graph linearly. There are multiple ways to implement Topological Sort like <a href=\"https://iq.opengenus.org/topological-sort-bfs/\" rel=\"noopener\" target=\"_blank\">using BFS</a>, <a href=\"https://iq.opengenus.org/topological-sorting-dfs/\" rel=\"noopener\" target=\"_blank\">using DFS</a> and <a href=\"https://iq.opengenus.org/kahns-algorithm-topological-sort/\" rel=\"noopener\" target=\"_blank\">Kahn's Algorithm</a>. Understand the <a href=\"https://iq.opengenus.org/applications-of-topological-sort/\" rel=\"noopener\" target=\"_blank\">applications</a> to understand the potential."}, {"title": "Bridges in Graph", "info": "The problem of finding <a href=\"https://iq.opengenus.org/find-all-bridges-in-graph/\" rel=\"noopener\" target=\"_blank\">all bridges in a Graph</a> is a hot Interview topic."}, {"title": "Hamiltonian Path & Cycle", "info": "The concept of <a href=\"https://iq.opengenus.org/hamiltonian-cycle/\" rel=\"noopener\" target=\"_blank\">Hamiltonian Cycle</a> and <a href=\"https://iq.opengenus.org/hamiltonian-path/\" rel=\"noopener\" target=\"_blank\">Hamiltonian Path</a> is critical for Interviews."}, {"title": "Count all paths", "info": "<a href=\"https://iq.opengenus.org/count-paths-from-top-left-to-bottom-right-of-a-matrix/\" rel=\"noopener\" target=\"_blank\">Finding all paths</a> is a way to count the paths but there exists other optimal ways where we can find the the total count without finding the actual paths."}, {"title": "Minimum Spanning Tree", "info": "The concept of Minimum Spanning Tree is important. <a href=\"https://iq.opengenus.org/kruskal-minimum-spanning-tree-algorithm/\" rel=\"noopener\" target=\"_blank\">Kruskal Minimum Spanning Tree</a> Algorithm and <a href=\"https://iq.opengenus.org/prim-minimum-spanning-tree-algorithm/\" rel=\"noopener\" target=\"_blank\">Prim Minimum Spanning Tree</a> Algorithm are two core algorithms to find MST."}]}, {"checklist_title": "Computational Geometry", "sub_titles": [{"title": "Number of integral points", "info": "This problem of finding the <a href=\"https://iq.opengenus.org/integral-points-between-two-points/\" rel=\"noopener\" target=\"_blank\">Number of integral points</a> between two points is a basic Interview problem. This involves <a href=\"https://iq.opengenus.org/picks-theorem/\" rel=\"noopener\" target=\"_blank\">Pick's theorem</a>. A variant is <a href=\"https://iq.opengenus.org/number-of-integral-points-inside-triangle/\" rel=\"noopener\" target=\"_blank\">Number of Integral points inside a triangle</a>."}, {"title": "Oriented area of a triangle", "info": "<a href=\"https://iq.opengenus.org/oriented-area-of-triangle/\" rel=\"noopener\" target=\"_blank\">Oriented area of a triangle</a> is an important Interview problem for Computational Geometry."}, {"title": "Furthest Pair of Points", "info": "Closest Pair of Points is a standard problem yet <a href=\"https://iq.opengenus.org/furthest-pair-of-points/\" rel=\"noopener\" target=\"_blank\">Furthest Pair of Points</a> is becoming a common questions in Interviews. It involves Rotating Calipers method."}]}, {"checklist_title": "Game Theory", "sub_titles": [{"title": "Game of Kayle", "info": "Game Theory problems are rare in Interviews but there are 2 concepts that are tested. <a href=\"https://iq.opengenus.org/sprague-grundy-theorem-game-of-kayle/\" rel=\"noopener\" target=\"_blank\">Sprague-Grundy Theorem and Game of Kayle</a> is one core concept."}]}, {"checklist_title": "Time Complexity Analysis", "sub_titles": [{"title": "Dynamic Array", "info": "<a href=\"https://iq.opengenus.org/time-complexity-of-dynamic-array/\" rel=\"noopener\" target=\"_blank\">Time Complexity Analysis of Dynamic Array</a> is a HOT interview questions. Candidates are asked how it works better than standard Array."}, {"title": "Multiplication", "info": "This is a tricky interview question. Many candidate think multiplication is a simple operation but it is not. Understanding the <a href=\"https://iq.opengenus.org/time-complexity-of-multiplication/\" rel=\"noopener\" target=\"_blank\">Time Complexity Analysis of Multiplication</a> is important."}, {"title": "Interpolation Search", "info": "Binary Search is a common theme among interviews and <a href=\"https://iq.opengenus.org/time-complexity-of-interpolation-search/\" rel=\"noopener\" target=\"_blank\">Time Complexity of Interpolation Search</a> is a HOT follow-up question in such cases."}]}, {"checklist_title": "Advanced problems", "sub_titles": [{"title": "Range Minimum query", "info": "The problem of Range Minimum query is common in advanced Interview rounds in FAANG. This can be solved using <a href=\"https://iq.opengenus.org/range-minimum-query-segment-tree/\" rel=\"noopener\" target=\"_blank\">Segment Tree</a> and <a href=\"https://iq.opengenus.org/range-minimum-query-square-root-decomposition/\" rel=\"noopener\" target=\"_blank\">Square Root Decomposition</a>."}, {"title": "Distinct Elements", "info": "The problem of finding <a href=\"https://iq.opengenus.org/number-of-distinct-elements-in-given-range/\" rel=\"noopener\" target=\"_blank\">Number of Distinct elements in a range</a> is a HOT interview problem. A follow-up interview question is to <a href=\"https://iq.opengenus.org/distinct-elements-in-range-query-with-single-element-updation/\" rel=\"noopener\" target=\"_blank\">support single element updates</a>."}, {"title": "Count inversions in array", "info": "This is another HOT interview problem in advanced rounds: <a href=\"https://iq.opengenus.org/count-inversions-in-an-array-using-fenwick-tree/\" rel=\"noopener\" target=\"_blank\">Count inversions in an array</a>. This is solved using the idea of <a href=\"https://iq.opengenus.org/fenwick-tree-range-product/\" rel=\"noopener\" target=\"_blank\">Fenwick Tree</a>."}, {"title": "Longest Increasing Subsequence", "info": "The problem of Longest Increasing Subsequence is a standard problem that is solved using <a href=\"https://iq.opengenus.org/longest-increasing-subsequence/\" rel=\"noopener\" target=\"_blank\">Binary Search and Dynamic Programming</a>. The challenge is to use <a href=\"https://iq.opengenus.org/longest-increasing-subsequence-fenwick-tree/\" rel=\"noopener\" target=\"_blank\">Fenwick Tree to solve LIS problem</a>. 2 follow-up questions are to find <a href=\"https://iq.opengenus.org/longest-common-increasing-subsequence/\" rel=\"noopener\" target=\"_blank\">Longest Common Increasing Subsequence</a> and <a href=\"https://iq.opengenus.org/longest-increasing-consecutive-subsequence/\" rel=\"noopener\" target=\"_blank\">Longest Increasing Consecutive Subsequence</a>."}]}]